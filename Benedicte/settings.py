"""
Django settings for Benedicte project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
import os
import environ 

from pathlib import Path


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Initialise django-environ
env = environ.Env(
    # set casting, default value
    DEBUG=(bool, False)
)
# Lecture du fichier .env
environ.Env.read_env(BASE_DIR / '.env')

# Mode de simulation pour l'analyse (True pour utiliser les données fictives)
USE_MOCK_ANALYSIS = env.bool('USE_MOCK_ANALYSIS', default=True) # True par défaut pour dev sans clés

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool('DEBUG', default=False)

INSEE_CONSUMER_KEY = env('INSEE_CONSUMER_KEY', default=None) # Ajout de default=None
INSEE_CONSUMER_SECRET = env('INSEE_CONSUMER_SECRET', default=None) # Ajout de default=None
OPENAI_API_KEY = env('OPENAI_API_KEY', default=None) # Ajout de default=None

ALLOWED_HOSTS = []

# Gestion pour Render
RENDER_EXTERNAL_HOSTNAME = env('RENDER_EXTERNAL_HOSTNAME', default=None)
if RENDER_EXTERNAL_HOSTNAME:
    ALLOWED_HOSTS.append(RENDER_EXTERNAL_HOSTNAME)

# Ajoutez aussi votre domaine personnalisé si vous en avez un plus tard
# ALLOWED_HOSTS.append('votre_domaine.com')

# Ajoutez 'localhost' et '127.0.0.1' si vous voulez tester en mode prod localement (avec DEBUG=False)
if DEBUG:
     ALLOWED_HOSTS.extend(['localhost', '127.0.0.1']) # Garder pour dev local
elif not RENDER_EXTERNAL_HOSTNAME: # Fallback si non sur Render et DEBUG=False
     ALLOWED_HOSTS.append('127.0.0.1') # Autoriser au moins localhost en prod locale
     
# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # Mes applications
    "users.apps.UsersConfig",
    "company.apps.CompanyConfig",
    "analysis.apps.AnalysisConfig",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    'whitenoise.middleware.WhiteNoiseMiddleware',
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "Benedicte.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        'DIRS': [BASE_DIR / 'templates'], # Ou os.path.join(BASE_DIR, 'templates') si vous préférez
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "Benedicte.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

# Configuration Static Files pour la production avec WhiteNoise
STATIC_ROOT = BASE_DIR / 'staticfiles' # Dossier où collectstatic mettra les fichiers
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage' # Recommandé pour l'efficacité

STATIC_URL = "static/"


STATICFILES_DIRS = [
    BASE_DIR / 'static', # Ou os.path.join(BASE_DIR, 'static')
]

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# nom_projet/settings.py

LOGIN_REDIRECT_URL = 'home' # Nom de l'URL où rediriger après connexion
LOGOUT_REDIRECT_URL = 'home' # Nom de l'URL où rediriger après déconnexion

# settings.py
CSRF_TRUSTED_ORIGINS = []
if RENDER_EXTERNAL_HOSTNAME:
     # Render utilise HTTPS
     CSRF_TRUSTED_ORIGINS.append(f"https://{RENDER_EXTERNAL_HOSTNAME}")
# Ajoutez https://votre_domaine.com si besoin