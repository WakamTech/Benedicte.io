"""
Django settings for Benedicte project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
import os
import environ 

from pathlib import Path


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Initialise django-environ
env = environ.Env(
    # set casting, default value
    DEBUG=(bool, False)
)
# Lecture du fichier .env
environ.Env.read_env(BASE_DIR / '.env')

# Mode de simulation pour l'analyse (True pour utiliser les données fictives)
USE_MOCK_ANALYSIS = env.bool('USE_MOCK_ANALYSIS', default=True) # True par défaut pour dev sans clés

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool('DEBUG', default=False)

INSEE_CONSUMER_KEY = env('INSEE_CONSUMER_KEY', default=None) # Ajout de default=None
INSEE_CONSUMER_SECRET = env('INSEE_CONSUMER_SECRET', default=None) # Ajout de default=None
OPENAI_API_KEY = env('OPENAI_API_KEY', default=None) # Ajout de default=None

ALLOWED_HOSTS = []

# Gestion pour Render
RENDER_EXTERNAL_HOSTNAME = env('RENDER_EXTERNAL_HOSTNAME', default=None)
if RENDER_EXTERNAL_HOSTNAME:
    ALLOWED_HOSTS.append(RENDER_EXTERNAL_HOSTNAME)

# Ajoutez aussi votre domaine personnalisé si vous en avez un plus tard
# ALLOWED_HOSTS.append('votre_domaine.com')

# Ajoutez 'localhost' et '127.0.0.1' si vous voulez tester en mode prod localement (avec DEBUG=False)
if DEBUG:
     ALLOWED_HOSTS.extend(['localhost', '127.0.0.1']) # Garder pour dev local
elif not RENDER_EXTERNAL_HOSTNAME: # Fallback si non sur Render et DEBUG=False
     ALLOWED_HOSTS.append('127.0.0.1') # Autoriser au moins localhost en prod locale
     

# Configuration pour utiliser l'email comme identifiant principal
AUTH_USER_MODEL = 'users.CustomUser' # <<< IMPORTANT: Nous allons créer un modèle utilisateur personnalisé
USERNAME_FIELD = 'email'            # <<< Utiliser l'email pour se connecter
EMAIL_FIELD = 'email'               # <<< Champ utilisé pour les fonctions email
EMAIL_REQUIRED = True              # <<< L'email est obligatoire
USERNAME_REQUIRED = False           # <<< Le champ 'username' n'est plus requis par Django

# settings.py
STRIPE_PUBLISHABLE_KEY = env('STRIPE_PUBLISHABLE_KEY', default=None)
STRIPE_SECRET_KEY = env('STRIPE_SECRET_KEY', default=None)
STRIPE_PRICE_ID = env('STRIPE_PRICE_ID', default=None)


STRIPE_WEBHOOK_SECRET = env('STRIPE_WEBHOOK_SECRET', default=None)
     
# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # Mes applications
    "users.apps.UsersConfig",
    "company.apps.CompanyConfig",
    "analysis.apps.AnalysisConfig",
    'content.apps.ContentConfig',
    'guided_analysis.apps.GuidedAnalysisConfig',
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    'whitenoise.middleware.WhiteNoiseMiddleware',
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "Benedicte.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        'DIRS': [BASE_DIR / 'templates'], # Ou os.path.join(BASE_DIR, 'templates') si vous préférez
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "Benedicte.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': env.db('DATABASE_URL', default='sqlite:///db.sqlite3')
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# settings.py

# ... autres settings ...

# Configuration Email (Backend Console pour Développement)
# Voir : https://docs.djangoproject.com/en/stable/topics/email/#console-backend
if DEBUG:
#     EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
# else:
    # --- CONFIGURATION PRODUCTION (à adapter selon votre fournisseur) ---
    # Exemple avec variables d'environnement pour un service SMTP
    EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
    EMAIL_HOST = env('EMAIL_HOST', default='smtp.example.com') # Ex: smtp.sendgrid.net
    EMAIL_PORT = env.int('EMAIL_PORT', default=587)           # Port standard TLS
    EMAIL_USE_TLS = env.bool('EMAIL_USE_TLS', default=True)
    EMAIL_HOST_USER = env('EMAIL_HOST_USER', default='')       # Votre username SMTP
    EMAIL_HOST_PASSWORD = env('EMAIL_HOST_PASSWORD', default='') # Votre mot de passe SMTP ou clé API
    DEFAULT_FROM_EMAIL = env('DEFAULT_FROM_EMAIL', default='noreply@benedicte.io') # Email expéditeur par défaut
    SERVER_EMAIL = DEFAULT_FROM_EMAIL # Email pour les erreurs serveur
    ADMINS = [('Admin Name', 'admin@benedicte.io')] # Email(s) pour recevoir les erreurs
    MANAGERS = ADMINS
    # --- FIN CONFIG PRODUCTION ---

# Email expéditeur par défaut (utilisé même avec backend console)
DEFAULT_FROM_EMAIL = env('DEFAULT_FROM_EMAIL', default='Benedicte.io <noreply@example.com>')


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

# settings.py
LANGUAGE_CODE = 'fr-fr' # Ou juste 'fr'
TIME_ZONE = 'Europe/Paris' # Mettre le bon fuseau horaire
USE_I18N = True
USE_L10N = True # Déprécié mais parfois utile pour formats
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

# Configuration Static Files pour la production avec WhiteNoise
STATIC_ROOT = BASE_DIR / 'staticfiles' # Dossier où collectstatic mettra les fichiers
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage' # Recommandé pour l'efficacité

STATIC_URL = "static/"


STATICFILES_DIRS = [
    BASE_DIR / 'static', # Ou os.path.join(BASE_DIR, 'static')
]

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# nom_projet/settings.py

LOGIN_REDIRECT_URL = 'home' # Nom de l'URL où rediriger après connexion
LOGOUT_REDIRECT_URL = 'home' # Nom de l'URL où rediriger après déconnexion

# settings.py
CSRF_TRUSTED_ORIGINS = []
if RENDER_EXTERNAL_HOSTNAME:
     # Render utilise HTTPS
     CSRF_TRUSTED_ORIGINS.append(f"https://{RENDER_EXTERNAL_HOSTNAME}")
# Ajoutez https://votre_domaine.com si besoin

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False, # Important pour ne pas désactiver les loggers par défaut
    'formatters': { # Définir comment les messages sont formatés
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': { # Définir où vont les messages
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'simple', # Utiliser le format simple pour la console
        },
        # Optionnel: Ajouter un handler pour écrire dans un fichier
        # 'file': {
        #     'level': 'DEBUG', # Capturer DEBUG et plus dans le fichier
        #     'class': 'logging.FileHandler',
        #     'filename': BASE_DIR / 'debug.log', # Chemin vers le fichier log
        #     'formatter': 'verbose', # Utiliser le format détaillé pour le fichier
        # },
    },
    'loggers': { # Définir le niveau pour des loggers spécifiques
        'django': { # Logger par défaut de Django
            'handlers': ['console'],
            'level': 'INFO', # Afficher INFO et plus pour Django lui-même
            'propagate': True,
        },
        'users': { # Logger de votre application 'users' (où est le webhook)
            'handlers': ['console'],
            # Afficher DEBUG et plus pour votre app SI settings.DEBUG est True
            'level': 'DEBUG' if DEBUG else 'INFO',
            'propagate': False, # Ne pas remonter au logger parent (root)
        },
         'analysis': { # Faire de même pour les autres apps où vous mettez des logs
            'handlers': ['console'],
            'level': 'DEBUG' if DEBUG else 'INFO',
            'propagate': False,
        },
         'company': {
            'handlers': ['console'],
            'level': 'DEBUG' if DEBUG else 'INFO',
            'propagate': False,
        },
        # Optionnel: Logger racine (capture tout ce qui n'est pas géré spécifiquement)
        # 'root': {
        #     'handlers': ['console'],
        #     'level': 'WARNING', # Capturer seulement WARNING et plus pour le reste
        # }
    },
}

# settings.py
APP_DOMAIN = env('APP_DOMAIN', default='localhost:8000' if DEBUG else 'votre_app.onrender.com')